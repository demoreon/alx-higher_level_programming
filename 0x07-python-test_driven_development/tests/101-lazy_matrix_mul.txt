Test for Matric product
==================================
>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

m_a is not a list
>>> lazy_matrix_mul(2, [])
Traceback (most recent call last):
...
ValueError: Scalar operands are not allowed, use '*' instead

m_b is not a list
>>> lazy_matrix_mul([], 5)
Traceback (most recent call last):
...
ValueError: Scalar operands are not allowed, use '*' instead

m_a contains an int instead of list
>>> lazy_matrix_mul([3],[])
Traceback (most recent call last):
...
ValueError: shapes (1,) and (0,) not aligned: 1 (dim 0) != 0 (dim 0)

m_b contains an int instead of list
>>> lazy_matrix_mul([[]],[2])
Traceback (most recent call last):
...
ValueError: shapes (1,0) and (1,) not aligned: 0 (dim 1) != 1 (dim 0)

m_a contains mixed list of list + int
>>> lazy_matrix_mul([[], 3],[])
Traceback (most recent call last):
...
ValueError: setting an array element with a sequence.

m_b contains mixed list of list + int
>>> lazy_matrix_mul([[]],[[], 2])
Traceback (most recent call last):
...
ValueError: setting an array element with a sequence.

m_a is empty
>>> lazy_matrix_mul([[]],[])
array([0.])

m_b is empty
>>> lazy_matrix_mul([[2, 4]],[[]])
Traceback (most recent call last):
...
ValueError: shapes (1,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

m_a contains string
>>> lazy_matrix_mul([[2, 'e']],[[3]])
Traceback (most recent call last):
...
ValueError: shapes (1,2) and (1,1) not aligned: 2 (dim 1) != 1 (dim 0)

m_b contains string
>>> lazy_matrix_mul([[2, 3]],[['e', 3]])
Traceback (most recent call last):
...
ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

m_a has different lenght
>>> lazy_matrix_mul([[2, 3], [3]],[[3, 3]])
Traceback (most recent call last):
...
ValueError: setting an array element with a sequence.

m_b has different lenght
>>> lazy_matrix_mul([[2, 3]],[[3, 3], [3]])
Traceback (most recent call last):
...
ValueError: setting an array element with a sequence.

Invalid Dimension
>>> lazy_matrix_mul([[2, 4, 6]],[[2, 8]])
Traceback (most recent call last):
...
ValueError: shapes (1,3) and (1,2) not aligned: 3 (dim 1) != 1 (dim 0)

Real Test
>>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
[[ 7 10]
 [15 22]]

Real Test
>>> print(lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]]))
[[13 16]]

>>> lazy_matrix_mul([[1, 2, 3], [4, 5, 6]], [[7, 8, 9, 10], [11, 12, 13, 14], [15, 16, 17, 18]])
array([[ 74,  80,  86,  92],
       [173, 188, 203, 218]])

m_a contains an int instead of list
>>> lazy_matrix_mul()
Traceback (most recent call last):
...
TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

m_a contains an int instead of list
>>> lazy_matrix_mul([[3]])
Traceback (most recent call last):
...
TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'
