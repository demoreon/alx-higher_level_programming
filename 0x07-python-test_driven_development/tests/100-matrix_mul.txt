Test for Matric product
==================================
>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

m_a is not a list
>>> matrix_mul(2, [])
Traceback (most recent call last):
...
TypeError: m_a must be a list

m_b is not a list
>>> matrix_mul([], 5)
Traceback (most recent call last):
...
TypeError: m_b must be a list

m_a contains an int instead of list
>>> matrix_mul([3],[])
Traceback (most recent call last):
...
TypeError: m_a must be a list of lists

m_b contains an int instead of list
>>> matrix_mul([[]],[2])
Traceback (most recent call last):
...
TypeError: m_b must be a list of lists

m_a contains mixed list of list + int
>>> matrix_mul([[], 3],[])
Traceback (most recent call last):
...
TypeError: m_a must be a list of lists

m_b contains mixed list of list + int
>>> matrix_mul([[]],[[], 2])
Traceback (most recent call last):
...
TypeError: m_b must be a list of lists

m_a is empty
>>> matrix_mul([[]],[])
Traceback (most recent call last):
...
ValueError: m_a can't be empty

m_b is empty
>>> matrix_mul([[2, 4]],[[]])
Traceback (most recent call last):
...
ValueError: m_b can't be empty

m_a contains string
>>> matrix_mul([[2, 'e']],[[3]])
Traceback (most recent call last):
...
TypeError: m_a should contain only integers or floats

m_b contains string
>>> matrix_mul([[2, 3]],[['e', 3]])
Traceback (most recent call last):
...
TypeError: m_b should contain only integers or floats

m_a has different lenght
>>> matrix_mul([[2, 3], [3]],[[3, 3]])
Traceback (most recent call last):
...
TypeError: each row of m_a must be of the same size

m_b has different lenght
>>> matrix_mul([[2, 3]],[[3, 3], [3]])
Traceback (most recent call last):
...
TypeError: each row of m_b must be of the same size

Invalid Dimension
>>> matrix_mul([[2, 4, 6]],[[2, 8]])
Traceback (most recent call last):
...
ValueError: m_a and m_b can't be multiplied
